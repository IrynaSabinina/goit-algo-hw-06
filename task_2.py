"""
This module implements DFS and BFS algorithms for finding paths in a graph.
It applies these algorithms to the transport network graph and compares their results.
"""

import networkx as nx
import matplotlib.pyplot as plt
from collections import deque

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ—ó –º–µ—Ä–µ–∂—ñ (—è–∫ —É Task 1)
G = nx.Graph()
edges = [
    ("Kyiv", "Lviv"), ("Kyiv", "Odesa"), ("Kyiv", "Kharkiv"), ("Kyiv", "Dnipro"),
    ("Lviv", "Odesa"), ("Lviv", "Kharkiv"), ("Odesa", "Dnipro"), ("Kharkiv", "Dnipro")
]
G.add_edges_from(edges)

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞—Ñ–∞
plt.figure(figsize=(6, 6))
pos = nx.spring_layout(G)
nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=2000, font_size=10)
plt.title("Transport Network Graph")
plt.show()

# –ê–ª–≥–æ—Ä–∏—Ç–º DFS (–ü–æ—à—É–∫ —É –ì–ª–∏–±–∏–Ω—É)
def dfs(graph, start, goal):
    stack = [(start, [start])]  # –°—Ç–µ–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —à–ª—è—Ö—É
    paths = []
    
    while stack:
        vertex, path = stack.pop()
        for neighbor in set(graph[vertex]) - set(path):  # –£–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ–≤
            new_path = path + [neighbor]
            if neighbor == goal:
                paths.append(new_path)
            else:
                stack.append((neighbor, new_path))
    
    return paths

# –ê–ª–≥–æ—Ä–∏—Ç–º BFS (–ü–æ—à—É–∫ —É –®–∏—Ä–∏–Ω—É)
def bfs(graph, start, goal):
    queue = deque([(start, [start])])  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ deque –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    paths = []
    
    while queue:
        vertex, path = queue.popleft()
        for neighbor in set(graph[vertex]) - set(path):  # –£–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ–≤
            new_path = path + [neighbor]
            if neighbor == goal:
                paths.append(new_path)
            else:
                queue.append((neighbor, new_path))
    
    return paths

# –í–∏–±—ñ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ—ó —Ç–∞ —Ü—ñ–ª—å–æ–≤–æ—ó –≤–µ—Ä—à–∏–Ω–∏
start_node = "Kyiv"
goal_node = "Dnipro"

# –í–∏–∫–æ–Ω–∞–Ω–Ω—è DFS —Ç–∞ BFS
dfs_paths = dfs(G, start_node, goal_node)
bfs_paths = bfs(G, start_node, goal_node)

# –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
print(f"üîç DFS-—à–ª—è—Ö–∏ –≤—ñ–¥ {start_node} –¥–æ {goal_node}:")
for path in dfs_paths:
    print(" ‚Üí ".join(path))

print(f"\nüîç BFS-—à–ª—è—Ö–∏ –≤—ñ–¥ {start_node} –¥–æ {goal_node}:")
for path in bfs_paths:
    print(" ‚Üí ".join(path))

# –ü–æ—è—Å–Ω–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ü—ñ –º—ñ–∂ DFS —Ç–∞ BFS
print("\nüìå –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è DFS —ñ BFS:")
print("‚úî DFS (–ø–æ—à—É–∫ —É –≥–ª–∏–±–∏–Ω—É) —Ä—É—Ö–∞—î—Ç—å—Å—è –≤–Ω–∏–∑ –ø–æ –æ–¥–Ω—ñ–π –≥—ñ–ª—Ü—ñ –≥—Ä–∞—Ñ–∞ –¥–æ –∫—ñ–Ω—Ü—è, –ø–µ—Ä—à –Ω—ñ–∂ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –Ω–∞–∑–∞–¥.")
print("‚úî BFS (–ø–æ—à—É–∫ —É —à–∏—Ä–∏–Ω—É) –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤—Å—ñ —Å—É—Å—ñ–¥–Ω—ñ –≤–µ—Ä—à–∏–Ω–∏ –ø–µ—Ä—à, –Ω—ñ–∂ –∑–∞–≥–ª–∏–±–ª—é–≤–∞—Ç–∏—Å—å, —Ç–æ–º—É –∑–∞–≤–∂–¥–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∫—Ä–æ–∫—ñ–≤.")
