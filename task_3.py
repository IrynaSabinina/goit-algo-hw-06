"""
This module implements Dijkstra's algorithm to find the shortest paths in a weighted transport network graph.
It calculates the shortest paths between all cities and visualizes the graph.
"""

import networkx as nx
import matplotlib.pyplot as plt
import heapq

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ—ó –º–µ—Ä–µ–∂—ñ –∑ –≤–∞–≥–∞–º–∏ (–≤—ñ–¥—Å—Ç–∞–Ω—ñ –≤ –∫–º)
G = nx.Graph()
edges = [
    ("Kyiv", "Lviv", 540),
    ("Kyiv", "Odesa", 475),
    ("Kyiv", "Kharkiv", 480),
    ("Kyiv", "Dnipro", 420),
    ("Lviv", "Odesa", 700),
    ("Lviv", "Kharkiv", 1000),
    ("Odesa", "Dnipro", 550),
    ("Kharkiv", "Dnipro", 210)
]
G.add_weighted_edges_from(edges)

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞—Ñ–∞ –∑ –≤–∞–≥–∞–º–∏
plt.figure(figsize=(6, 6))
pos = nx.spring_layout(G, seed=42)  # –§—ñ–∫—Å—É—î–º–æ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –≤–µ—Ä—à–∏–Ω
nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=2000, font_size=10)
edge_labels = nx.get_edge_attributes(G, 'weight')
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)
plt.title("Transport Network with Weights")
plt.show()

# –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –î–µ–π–∫—Å—Ç—Ä–∏
def dijkstra(graph, start):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –≤—ñ–¥ —Å—Ç–∞—Ä—Ç–æ–≤–æ—ó –≤–µ—Ä—à–∏–Ω–∏ –¥–æ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —É –≥—Ä–∞—Ñ—ñ."""
    distances = {node: float('inf') for node in graph.nodes}
    previous_nodes = {node: None for node in graph.nodes}
    distances[start] = 0
    pq = [(0, start)]  # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ —á–µ—Ä–≥–∞ (–≤–∞–≥–∞, –≤—É–∑–æ–ª)

    while pq:
        current_distance, current_node = heapq.heappop(pq)

        for neighbor in graph[current_node]:
            weight = graph[current_node][neighbor]['weight']
            distance = current_distance + weight

            if distance < distances[neighbor]:  # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—å
                distances[neighbor] = distance
                previous_nodes[neighbor] = current_node
                heapq.heappush(pq, (distance, neighbor))

    return distances, previous_nodes

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ —à–ª—è—Ö—É
def reconstruct_path(previous_nodes, start, end):
    """–í—ñ–¥–Ω–æ–≤–ª—é—î –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –º—ñ–∂ –¥–≤–æ–º–∞ –≤–µ—Ä—à–∏–Ω–∞–º–∏."""
    path = []
    while end is not None:
        path.append(end)
        end = previous_nodes[end]
    return path[::-1]  # –†–µ–≤–µ—Ä—Å—É—î–º–æ —à–ª—è—Ö

# –û–±—á–∏—Å–ª–µ–Ω–Ω—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤ –≤—ñ–¥ –∫–æ–∂–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏
shortest_paths_all = {}
for city in G.nodes:
    distances, previous_nodes = dijkstra(G, city)
    shortest_paths_all[city] = (distances, previous_nodes)

# –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
for start_city, (distances, previous_nodes) in shortest_paths_all.items():
    print(f"\nüöè –ù–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –≤—ñ–¥ {start_city}:")
    for target_city in G.nodes:
        if target_city != start_city:
            path = reconstruct_path(previous_nodes, start_city, target_city)
            print(f"{start_city} ‚Üí {target_city}: {distances[target_city]} –∫–º, —à–ª—è—Ö: {' ‚Üí '.join(path)}")
